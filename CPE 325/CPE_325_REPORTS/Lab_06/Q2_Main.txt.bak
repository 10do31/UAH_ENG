#define SW1 (P1IN&BIT0)
#define SW2 (P1IN&BIT1)

/*------------------------------------------------------------------------------*/
int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;				// stop watchdog timer
	
	
	FLL_CTL0 |= DCOPLUS + XCAP18PF; 		// DCO+ set, freq = xtal x D x N+1
	SCFI0 |= FN_2; 							// x2 DCO freq, 8MHz nominal DCO
	SCFQCTL = 30; 							// (30+1) x 32768 x 2 = ~2 MHz
	
	P2DIR |= BIT2+BIT1; 					// P2.1 and P2.2 set to output
	
	_EINT(); 								// Enable global interrupts
	P2OUT &= ~BIT2; 						// Ensure LED 2 is off.
	P1IES |= BIT1 + BIT0; 					// Interrupt on hi/lo edge.
	P1IE |= BIT1 + BIT0; 					// Enable interrupts on P1.0 and P1.1.
	P1IFG &= ~(BIT1+BIT0); 					// Clear interrupt flags.
	
	P2OUT &= ~BIT2
	
	while(1) 
	{
		P2OUT ^= BIT1;						// LED 2 toggled on.
	}
	
	return 0;
}

/*----------------------------------------------------------------------------*/

			/*    ISR: SW1 and SW2     */
#pragma vector = PORT1_VECTOR
__interrupt void S1S2_ISR (void)
{
	P1IFG &= ~(BIT1 + BIT2); 				//Clear interrupt flags 
	
			/*         SW1          */
	if (SW1 == 0) //If SW1 is pressed
	{
		SCFQCTL = 60; 						//2x frequency
		while (SW1 == 0) 					//While SW1 is pressed...
		{
			{
				P2OUT |= BIT1; 				//LED2 ON
			}
		}
	}
	
		  /*          SW2          */
	if (SW2 == 0) 							//If SW2 is pressed
	{
		SCFQCTL = 120; 						//4x freq
		while (SW2 == 0) 					//While SW2 is pressed...
		{
			{
				P2OUT ^= BIT1; 				//LED2 toggle
			}
		}
	}
	
		/*          SW1 and SW2          */
	if (SW1 && SW2 == 0) 					//If SW1 & SW2 are pressed
	{
		P2OUT |= BIT2; 						//LED1 ON
		SCFQCTL = 15; 						//0.5x frequency
		
		while (SW1 && SW2 == 0) 			//While SW1 is pressed...
		{
	
			{
				P2OUT ^= BIT2; 				//LED1 toggled on.
				P2OUT ^= BIT1; 				//LED2 toggled on.
			}
		}
	}
	
	SCFQCTL = 30; 							//1x frequency
	P2OUT |= (BIT1 + BIT2); 				// LED1 and LED2 both on.
}
/*----------------------------------------------------------------------------*/